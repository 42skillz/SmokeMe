<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmokeMe</name>
    </assembly>
    <members>
        <member name="T:SmokeMe.Constants">
            <summary>
            Constants for the /smoke library
            </summary>
        </member>
        <member name="F:SmokeMe.Constants.GlobaltimeoutinmsecConfigurationKey">
            <summary>
            Gets the name of the configuration key for the smoke test global execution timeout.
            </summary>
        </member>
        <member name="F:SmokeMe.Constants.GlobalTimeoutInMsecDefaultValue">
            <summary>
            Gets the default value for the global timeout in milliseconds if the (<see cref="F:SmokeMe.Constants.GlobaltimeoutinmsecConfigurationKey"/>) configuration key is not used to override it.
            </summary>
        </member>
        <member name="T:SmokeMe.Controllers.SmokeController">
            <summary>
            Executes smoke test declared for this API.
            Smoke tests are a set of short functional tests checking that the minimum viable prerequisites for this API is fine.
            </summary>
        </member>
        <member name="M:SmokeMe.Controllers.SmokeController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider,SmokeMe.IFindSmokeTests)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.Controllers.SmokeController"/>.
            </summary>
            <param name="configuration">The configuration of the API.</param>
            <param name="serviceProvider">A Service provider to be used to instantiate <see cref="T:SmokeMe.ISmokeTestAScenario"/> smoke tests.</param>
            <param name="smokeTestProvider">(optional) A smoke test provider (used for unit testing purpose).</param>
        </member>
        <member name="M:SmokeMe.Controllers.SmokeController.RunSmokeTests">
            <summary>
            Execute all registered Smoke Tests for this API.
            </summary>
            <returns>The <see cref="T:SmokeMe.SmokeTestSessionResult"/> of the Smoke tests execution.</returns>
        </member>
        <member name="T:SmokeMe.Error">
            <summary>
            Error during a <see cref="T:SmokeMe.ISmokeTestAScenario"/> excecution.
            </summary>
        </member>
        <member name="M:SmokeMe.Error.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an <see cref="T:SmokeMe.Error"/>.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="exception">An exception that has been catched during the <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.</param>
        </member>
        <member name="P:SmokeMe.Error.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:SmokeMe.Error.Exception">
            <summary>
            The exception that has been catched during the <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.
            </summary>
        </member>
        <member name="T:SmokeMe.Helpers.ReflectionExtensions">
            <summary>
            Extension methods related to the usage of Reflection.
            </summary>
        </member>
        <member name="M:SmokeMe.Helpers.ReflectionExtensions.IsEnumerable(System.Type)">
            <summary>
            Gets a value indicating whether a given <see cref="T:System.Type"/> is <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns><b>true</b> if the <see cref="T:System.Type"/> is a <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:SmokeMe.Helpers.ReflectionExtensions.GetConstructorsOrderedByNumberOfParametersDesc(System.Type)">
            <summary>
            Gets all the constructors of a <see cref="T:System.Type"/> ordered by their number of parameters desc.
            </summary>
            <param name="type">The considered <see cref="T:System.Type"/>.</param>
            <returns>All the constructors of a <see cref="T:System.Type"/> ordered by their number of parameters desc.</returns>
        </member>
        <member name="T:SmokeMe.IFindSmokeTests">
            <summary>
            Responsible to find smoke tests to be run within an executable.
            </summary>
        </member>
        <member name="M:SmokeMe.IFindSmokeTests.FindAllSmokeTestsToRun">
            <summary>
            Instantiates all the <see cref="T:SmokeMe.ISmokeTestAScenario"/> instances that have been found in the running code.
            </summary>
            <returns>A collection of <see cref="T:SmokeMe.ISmokeTestAScenario"/> instances.</returns>
        </member>
        <member name="T:SmokeMe.ISmokeTestAScenario">
            <summary>
            Contains scenario to be executed in order to 'smoke test' something.
            (a Smoke test actually).
            Note: all the services and dependencies you need for it will be automatically
            injected by the lib via the ASP.NET IServiceProvider of your API
            (classical constructor-based injection).
            </summary>
        </member>
        <member name="M:SmokeMe.ISmokeTestAScenario.ExecuteScenario">
            <summary>
            Executes the scenario of this Smoke Test.
            </summary>
            <returns>The <see cref="T:SmokeMe.SmokeTestResult"/> of this Smoke test.</returns>
        </member>
        <member name="T:SmokeMe.SmokeTestAutoFinder">
            <summary>
            Responsible to find and instantiate smoke tests to be run within an executable.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestAutoFinder.#ctor(System.IServiceProvider)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestAutoFinder"/>
            </summary>
            <param name="serviceProvider">The (IoC) <see cref="T:System.IServiceProvider"/> instance needed to instantiate <see cref="T:SmokeMe.ISmokeTestAScenario"/> instances.</param>
        </member>
        <member name="M:SmokeMe.SmokeTestAutoFinder.FindAllSmokeTestsToRun">
            <summary>
            Finds all smoke tests scenarii that have to be executed for this API.
            </summary>
            <returns>The collection of all <see cref="T:SmokeMe.ISmokeTestAScenario"/> instance declared in this API to be executed.</returns>
        </member>
        <member name="T:SmokeMe.SmokeTestResult">
            <summary>
            Result of a <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResult.Outcome">
            <summary>
            Indicates whether the outcome of this <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution is positive or not.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResult.ErrorMessage">
            <summary>
            Gets the <see cref="T:SmokeMe.Error"/> associated to this <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestResult.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestResult"/>.
            </summary>
            <param name="errorMessage">The error message associated to the smoke test execution.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated to the smoke test execution.</param>
        </member>
        <member name="M:SmokeMe.SmokeTestResult.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestResult"/>.
            </summary>
            <param name="outcome">The outcome of this <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.</param>
        </member>
        <member name="M:SmokeMe.SmokeTestResult.ToString">
            <summary>
            Returns a string representing the object.
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:SmokeMe.SmokeTestRunner">
            <summary>
            Runner for <see cref="T:SmokeMe.ISmokeTestAScenario"/> instances.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestRunner.ExecuteAllSmokeTests(System.Collections.Generic.IEnumerable{SmokeMe.ISmokeTestAScenario},System.TimeSpan)">
            <summary>
            Executes <see cref="T:SmokeMe.ISmokeTestAScenario"/> instances that has been found for this API.
            </summary>
            <param name="smokeTests">The <see cref="T:SmokeMe.ISmokeTestAScenario"/> instances to be executed in parallel.</param>
            <param name="globalTimeout">The maximum amount of time allowed for all <see cref="T:SmokeMe.ISmokeTestAScenario"/> instances to be executed.</param>
            <returns>The <see cref="T:SmokeMe.SmokeTestSessionResult"/>.</returns>
        </member>
        <member name="T:SmokeMe.TimeoutSmokeTestSessionResult">
            <summary>
            Represents a failed (due to timeout) smoke test session.
            </summary>
        </member>
        <member name="M:SmokeMe.TimeoutSmokeTestSessionResult.#ctor(System.TimeSpan)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.TimeoutSmokeTestSessionResult"/>.
            </summary>
            <param name="globalTimeout">The global timeout expiration that led to his failure.</param>
        </member>
        <member name="T:SmokeMe.SmokeTestSessionResult">
            <summary>
            Result of a smoke test session.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestSessionResult.Results">
            <summary>
            Gets all the <see cref="T:SmokeMe.SmokeTestResultWithMetaData"/> results of this Smoke test session.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestSessionResult.IsSuccess">
            <summary>
            Returns <b>true</b> if the Smoke test session is succeeded (i.e. all smoke test succeeded), <b>false</b> otherwise.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestSessionResult.#ctor(SmokeMe.SmokeTestResultWithMetaData[],System.Nullable{System.Boolean})">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestSessionResult"/>.
            </summary>
            <param name="results">The results of this Smoke test session.</param>
            <param name="isSuccess">Whether or not the <see cref="T:SmokeMe.SmokeTestSessionResult"/> is successful or not.</param>
        </member>
        <member name="P:SmokeMe.SmokeTestSessionResult.InstanceIdentifier">
            <summary>
            Gets the API instance identifier.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestSessionResult.ApiVersion">
            <summary>
            Gets the API version.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestSessionResult.OsName">
            <summary>
            Gets the OS name of this API instance.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestSessionResult.AzureRegionName">
            <summary>
            Gets the Azure region name where this API instance is running.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestSessionResult.NbOfProcessors">
            <summary>
            Gets the number of Processors this API instance has.
            </summary>
        </member>
        <member name="T:SmokeMe.SmokeTestResultWithMetaData">
            <summary>
            Result of a <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution but with its <see cref="P:SmokeMe.SmokeTestResultWithMetaData.Duration"/>.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResultWithMetaData.Outcome">
            <summary>
            Indicates whether the outcome of this <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution is positive or not.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResultWithMetaData.ErrorMessage">
            <summary>
            Gets the <see cref="T:SmokeMe.Error"/> associated to this <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResultWithMetaData.Duration">
            <summary>
            Gets the duration of this <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestResultWithMetaData.#ctor(SmokeMe.SmokeTestResult,System.TimeSpan)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestResultWithMetaData"/>.
            </summary>
            <param name="smokeTestResult">The <see cref="P:SmokeMe.SmokeTestResultWithMetaData.SmokeTestResult"/> associated with this <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.</param>
            <param name="duration">The duration of this <see cref="T:SmokeMe.ISmokeTestAScenario"/> execution.</param>
        </member>
        <member name="M:SmokeMe.SmokeTestResultWithMetaData.ToString">
            <summary>
            Returns a string representing the object.
            </summary>
            <returns>A string representing the object.</returns>
        </member>
    </members>
</doc>
